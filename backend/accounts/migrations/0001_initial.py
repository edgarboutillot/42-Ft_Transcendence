# Generated by Django 4.2.9 on 2025-01-09 14:54

import accounts.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_2fa_enabled', models.BooleanField(default=False)),
                ('two_factor_code', models.CharField(blank=True, max_length=6, null=True)),
                ('two_factor_code_timestamp', models.DateTimeField(blank=True, null=True)),
                ('avatar', models.ImageField(default='assets/avatars/ladybug.png', max_length=255, upload_to='avatars/')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('intra_42_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('is_42_user', models.BooleanField(default=False)),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('fr', 'Français'), ('es', 'Español'), ('swe', 'Svenska')], default='en', max_length=3, verbose_name='Preferred Language')),
                ('blocked_users', models.ManyToManyField(related_name='blocked_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts_customuser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GameHostOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scoreToWin', models.IntegerField(default=5)),
                ('difficulty', models.CharField(default='medium', max_length=50)),
                ('ballSpeedStart', models.FloatField(default=10.0)),
                ('ballSpeedMax', models.FloatField(default=30.0)),
                ('ballSpeedIncrease', models.FloatField(default=1.0)),
                ('powerups', models.JSONField(blank=True, default=accounts.models.default_powerups)),
                ('keyboardSettings', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_to_win', models.IntegerField(default=5)),
                ('difficulty', models.CharField(default='medium', max_length=50)),
                ('ball_speed_start', models.FloatField(default=10.0)),
                ('ball_speed_max', models.FloatField(default=30.0)),
                ('ball_speed_increase', models.FloatField(default=1.0)),
                ('powerups', models.JSONField(blank=True, default=list)),
                ('keyboard_settings', models.JSONField(blank=True, default=accounts.models.default_keyboard_settings)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opponent_name', models.CharField(blank=True, max_length=100, null=True)),
                ('score_user', models.IntegerField()),
                ('score_opponent', models.IntegerField()),
                ('result', models.BooleanField()),
                ('date_played', models.DateTimeField(auto_now_add=True)),
                ('power_catch', models.IntegerField(default=0)),
                ('max_ball_speed', models.FloatField(default=0.0)),
                ('longest_rally', models.IntegerField(default=0)),
                ('opponent_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_as_opponent', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_as_player', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FriendShip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='friends',
            field=models.ManyToManyField(related_name='user_friends', through='accounts.FriendShip', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='customuser_permissions_set', to='auth.permission'),
        ),
    ]
